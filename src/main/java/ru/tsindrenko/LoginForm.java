package ru.tsindrenko;

import com.google.gson.Gson;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LoginForm extends JFrame {
    private final String userNotFound = "USER_NOT_FOUND";
    private final String wrongPassword = "WRONG_PASSWORD";
    private final String loginIsOccupied = "LOGIN_IS_OCCUPIED";
    private final String userIsLogged = "USER_IS_LOGGED";
    private final String accepted = "SUCCESSFUL_OPERATION";
    //родительские поля
    private JPanel rootPanel;
    private JTabbedPane tabsPanel;
    //поля входа
    private JTextField loginInput;
    private JPasswordField passwordInput;
    private JLabel loginMessage;
    private JLabel passwordMessage;
    private JPanel loginPanel;
    private JLabel loginLabel;
    private JLabel passwordLabel;
    private JButton submitButton;
    //поля регистрации
    private JPanel registrationPanel;
    private JTextField loginInputR;
    private JPasswordField passwordInputR;
    private JButton submitRegistrationButton;
    private JLabel loginMessageR;
    private JLabel passwordMessageR;
    private JTextField nicknameInputR;
    private JLabel nicknameMessageR;

    //служебные поля
    private GUI gui;
    private Gson gson;

    LoginForm(GUI gui) {
        //общие настройки
        this.gui = gui;
        gson = new Gson();
        gui.setEnabled(false);
        setContentPane(rootPanel);
        setVisible(true);
        setLocation(850, 350);
        setSize(300, 300);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        tabsPanel.addChangeListener(new TabChangeListener());
        //настройки входа
        loginPanel.setVisible(true);
        loginMessage.setVisible(false);
        passwordMessage.setVisible(false);
        LoginButtonEventListener buttonEventListener = new LoginButtonEventListener();
        submitButton.addActionListener(buttonEventListener);
        //настройки регистрации
        loginInputR.setEditable(false);
        passwordInputR.setEditable(false);
        nicknameInputR.setEditable(false);
        submitRegistrationButton.setEnabled(false);
        registrationPanel.setVisible(true);
        loginMessageR.setVisible(false);
        passwordMessageR.setVisible(false);
        nicknameMessageR.setVisible(false);
        RegistrationButtonEventListener registrationButtonEventListener = new RegistrationButtonEventListener();
        submitRegistrationButton.addActionListener(registrationButtonEventListener);
    }

    //общие методы

    class TabChangeListener implements ChangeListener {
        public void stateChanged(ChangeEvent e) {
            switch (tabsPanel.getSelectedIndex()) {
                case 0:
                    loginInputR.setEditable(false);
                    passwordInputR.setEditable(false);
                    nicknameInputR.setEditable(false);
                    submitRegistrationButton.setEnabled(false);
                    loginInput.setEditable(true);
                    passwordInput.setEditable(true);
                    submitButton.setEnabled(true);
                    break;
                case 1:
                    loginInput.setEditable(false);
                    passwordInput.setEditable(false);
                    submitButton.setEnabled(false);
                    loginInputR.setEditable(true);
                    passwordInputR.setEditable(true);
                    nicknameInputR.setEditable(true);
                    submitRegistrationButton.setEnabled(true);
                    break;
            }
        }
    }

    private String passwordToString(char[] password) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < password.length; i++) {
            sb.append(password[i]);
        }
        return sb.toString();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.setBorder(BorderFactory.createTitledBorder(""));
        tabsPanel = new JTabbedPane();
        tabsPanel.setEnabled(true);
        rootPanel.add(tabsPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        loginPanel = new JPanel();
        loginPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        tabsPanel.addTab("Вход", loginPanel);
        loginPanel.setBorder(BorderFactory.createTitledBorder(""));
        loginInput = new JTextField();
        loginPanel.add(loginInput, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        passwordInput = new JPasswordField();
        loginPanel.add(passwordInput, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        loginLabel = new JLabel();
        loginLabel.setText("Логин");
        loginPanel.add(loginLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordLabel = new JLabel();
        passwordLabel.setText("Пароль");
        loginPanel.add(passwordLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        submitButton = new JButton();
        submitButton.setText("Войти");
        loginPanel.add(submitButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginMessage = new JLabel();
        loginMessage.setText("Label");
        loginPanel.add(loginMessage, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordMessage = new JLabel();
        passwordMessage.setText("Label");
        loginPanel.add(passwordMessage, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        registrationPanel = new JPanel();
        registrationPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        registrationPanel.setEnabled(true);
        tabsPanel.addTab("Регистрация", registrationPanel);
        registrationPanel.setBorder(BorderFactory.createTitledBorder(""));
        loginInputR = new JTextField();
        registrationPanel.add(loginInputR, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        passwordInputR = new JPasswordField();
        registrationPanel.add(passwordInputR, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Логин");
        registrationPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Пароль");
        registrationPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        submitRegistrationButton = new JButton();
        submitRegistrationButton.setText("Зарегистрироваться");
        registrationPanel.add(submitRegistrationButton, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginMessageR = new JLabel();
        loginMessageR.setText("Label");
        registrationPanel.add(loginMessageR, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordMessageR = new JLabel();
        passwordMessageR.setText("Label");
        registrationPanel.add(passwordMessageR, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nicknameInputR = new JTextField();
        registrationPanel.add(nicknameInputR, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Ник");
        registrationPanel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nicknameMessageR = new JLabel();
        nicknameMessageR.setText("Label");
        registrationPanel.add(nicknameMessageR, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    /*
     *
     */


    //методы и классы входа
    class LoginButtonEventListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            loginMessage.setVisible(false);
            passwordMessage.setVisible(false);
            if (!loginInput.getText().isEmpty() && passwordInput.getPassword().length > 0) {
                Sender.sendMessage(gson.toJson(new LoginMessage(loginInput.getText(), passwordToString(passwordInput.getPassword()))));
                loginInput.setEditable(false);
                passwordInput.setEditable(false);
            } else {
                if (loginInput.getText().isEmpty()) {
                    loginMessage.setVisible(true);
                    loginMessage.setText("Введите логин");
                } else
                    loginMessage.setVisible(false);
                if (passwordInput.getPassword().length <= 0) {
                    passwordMessage.setVisible(true);
                    passwordMessage.setText("Введите пароль");
                } else passwordMessage.setVisible(false);
            }
        }
    }

    public void getLoginInformation(String message) {
        switch (message) {
            case userNotFound:
                JOptionPane.showMessageDialog(null, "Пользователя с таким логином не найдено");
                loginMessage.setVisible(true);
                loginMessage.setText("Нет пользователя с таким логином");
                loginInput.setEditable(true);
                passwordInput.setEditable(true);
                break;
            case userIsLogged:
                JOptionPane.showMessageDialog(null, "Пользователь уже в сети");
                loginInput.setEditable(true);
                passwordInput.setEditable(true);
                break;
            case wrongPassword:
                JOptionPane.showMessageDialog(null, "Неверный пароль");
                passwordMessage.setVisible(true);
                passwordMessage.setText("Неверный пароль");
                loginInput.setEditable(true);
                passwordInput.setEditable(true);
                break;
            case loginIsOccupied:
                JOptionPane.showMessageDialog(null, "Логин занят");
                if (loginInput.getText().isEmpty()) {
                    loginMessageR.setVisible(true);
                    loginMessageR.setText("Данный логин занят");
                    loginInputR.setEditable(true);
                    passwordInputR.setEditable(true);
                    nicknameInputR.setEditable(true);
                    break;
                } else {
                    loginMessage.setVisible(true);
                    loginMessage.setText("Данный логин занят");
                    loginInput.setEditable(true);
                    passwordInput.setEditable(true);
                    break;
                }
            case accepted:
                if (loginInput.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Вы успешно зарегистрировались");

                } else {
                    JOptionPane.showMessageDialog(null, "Вы успешно авторизировались");

                }
                setVisible(false);
                gui.setEnabled(true);
                gui.setVisible(true);
                dispose();
                break;
        }

    }

    /*
     *
     */

    //методы и классы регистрации

    class RegistrationButtonEventListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            loginMessageR.setVisible(false);
            passwordMessageR.setVisible(false);
            nicknameMessageR.setVisible(false);
            loginInput.setText("");
            passwordInput.removeAll();

            if (!loginInputR.getText().isEmpty() && passwordInputR.getPassword().length > 0 && !nicknameInputR.getText().isEmpty()) {
                Sender.sendMessage(gson.toJson(new User(loginInputR.getText(), passwordToString(passwordInputR.getPassword()), nicknameInputR.getText())));
                loginInputR.setEditable(false);
                passwordInputR.setEditable(false);
                nicknameInputR.setEditable(false);
            } else {
                if (loginInputR.getText().isEmpty()) {
                    loginMessageR.setVisible(true);
                    loginMessageR.setText("Введите логин");
                } else
                    loginMessageR.setVisible(false);

                if (nicknameInputR.getText().isEmpty()) {
                    nicknameMessageR.setVisible(true);
                    nicknameMessageR.setText("Введите ник");
                } else
                    nicknameMessageR.setVisible(false);

                if (passwordInputR.getPassword().length <= 0) {
                    passwordMessageR.setVisible(true);
                    passwordMessageR.setText("Введите пароль");
                } else passwordMessageR.setVisible(false);
            }
        }
    }

}
